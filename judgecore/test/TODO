代码整理 LANG -> enum, struct config, 分文件分模块

process_to_kill

添加执行闹钟时间限制

系统调用拦截模式

STRICT_SAFE -> ALMOST_SAFE -> BESTEFFORT_SANDBOX

bpf 关注想要关注的系统调用
https://www.freebsd.org/cgi/man.cgi?query=bpf

按照第x个参数是路径的 分类系统调用

检测是否为读取、写入

遇到对不合理路径的读写、先写后读，修改路径  /tmp/s-id-sandbox

https://www.alfonsobeato.net/c/modifying-system-call-arguments-with-ptrace/
https://www.alfonsobeato.net/c/filter-and-modify-system-calls-with-seccomp-and-ptrace/

实用性原因 开发灵活的自定义系统
当前已有系统存在的问题

可能的威胁模型，介绍
设计对应的安全模型，防御对策，介绍
方案：创建销毁 Docker、拦截系统调用（慢）、使用 libseccomp （限制多）、使用 BPF
对威胁的拦截能力验证，正常程序误报率
与目前已有解决方案对比
对应的性能评测指标，与创建销毁 Docker 对比性能情况验证与优劣势分析

对其他新的安全环境、跨指令集的构建执行支持
Docker 与 QEMU 的协作执行